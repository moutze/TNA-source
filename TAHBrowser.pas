{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ unit TAHBrowser
  * Terminologia Anatomiae Humanae (TAH) hierarchical browser *
  Description:
  This application is a browser of TAH. It includes a global partonomy, a
  number of partial partonomies, and a taxonomy. The taxonomy is derived
  from the FMA, but it includes modifications made by FIPAT.<P>
  This application is dependent on several export files from the TAH database.
  This database being regularly updated, the exported file needs to be checked
  for a recent version.<P>
  This application defines a number of constants, acting as generation
  parameters when web pages are built. They can be adjusted at design time.</P>
  This aplication is built according to the object oriented paradigm and
  follows the best recommandations in this domain.</P>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
unit TAHBrowser;

interface

uses
  Entity, TAHParam, LAProc, Tetra, TAH, TAHPage,
  SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ComCtrls, Menus, Vcl.StdCtrls;

const
                             // Use st_Bat stored autogenerated values
  AutoUse:                   Boolean = False;
                             // Mode of generation: True = extended generation
  Dev:                       Boolean = True;
                             // Criteria for limiting visibility
  Publ:                      Boolean = False;
                             // Latin model usage
  IsMod:                     Boolean = False;
                             // Display FMA history (only if FMAChange is True)
  FMAHist:                   Boolean = True;
                             // Do indent the HTML and XML files
  IsIndent:                  Boolean = True;
                             // Number of TA98 entities
  Tot98:                     Integer = 7444;
                             // Flag for irregular terms
  Irreg:                     Boolean = True;
                             // Flag for TA98 partonomic files
  IsTA98:                    Boolean = False;
                             // Flag for short TA98 partonomic files
  TA98Short:                 Boolean = False;
                             // Flag for language validation
  LgValid:                   Boolean = True;
                             // Flag for multiple languages
  MultiLg:                   Boolean = False;
                             // Flag for large pages
  IsLarge:                   Boolean = False;
                             // Flag for published lists
  IsPub:                     Boolean = False;
                             // Flag for Excel file
  IsExcel:                   Boolean = False;
var
                             // Display FMA changes
  FMAChange:                 Boolean = False;

type
                             // The class for specialized TAH tree view
  tTAHTreeView               = class( TTreeView )
    public
                             // Reset the TAH treeview
    procedure                Reset(
                               var TopNode: TTreeNode );
                             // Control the expansion of a TAH node
    procedure                MakeExpansion(
                               var Node: TTreeNode );
                             // Open treeview for partonomy
    procedure                OpenHierarchy(
                               TID: Integer;
                               IsTax: Boolean;
                               var CurrentNode: TTreeNode );
  end;
                             // Record for FixTrad
  FixTradRec                 = record
    TID:                     Integer;
    Pos:                     Integer;
    Syntax:                  String;
  end;

                             // The class of the visual interface to TAHDev
  tTHAHierarForm             = class( TForm )
    MainMenu:                TMainMenu;
    mnuFileMain:             TMenuItem;
    mnuExit:                 TMenuItem;
    mnuViewMain:             TMenuItem;
    mnuTALanguage:           TMenuItem;
    mnuLatin:                TMenuItem;
    mnuEnglish:              TMenuItem;
    mnuFrench:               TMenuItem;
    N6:                      TMenuItem;
    mnuHTMLTA10:             TMenuItem;
    mnuPropertyBySection:    TMenuItem;
    mnuEntityPage:           TMenuItem;
    mnuUniversalPage:        TMenuItem;
    mnuSectionValidate:      TMenuItem;
    N7:                      TMenuItem;
    TA10ByChapter:           TMenuItem;
    mnuPropertyByChapter:    TMenuItem;
    mnuRevTermAStat:         TMenuItem;
    mnuExcelbyChapter:       TMenuItem;
    mnuProblemPage:          TMenuItem;
    mnuAlphaPage:            TMenuItem;
    mnuKWICPage:             TMenuItem;
    mnuExcelLA:              TMenuItem;
    mnuHierarchicalList:     TMenuItem;
    mnuDefinitionPage:       TMenuItem;
    N2:                      TMenuItem;
    N3:                      TMenuItem;
    mnuSingleletterpage:     TMenuItem;
    mnuthreeletterspage:     TMenuItem;

                             // The treeview for TAH
    TAHHierar:               TTreeView;
                             // Status bar for the main form
    StatusBar:               TStatusBar;
                             // File selection dialog box
    OpenDialog:              TOpenDialog;
                             // Treeview popup menu
    PopupMenu:               TPopupMenu;
                             // Text field for input of a search TID
    SearchTID:               TEdit;
    mnuSegmentPage:          TMenuItem;
    N4:                      TMenuItem;
    mnuLevel4Page:           TMenuItem;
    mnuLevel4Excel:          TMenuItem;
    N5:                      TMenuItem;
    mnuValidationPageClick:  TMenuItem;
    mnuLevel46column:        TMenuItem;
    N8:                      TMenuItem;
    mnuL5Pages:              TMenuItem;
    N9:                      TMenuItem;
    mnuGroupLevel4:          TMenuItem;
    mnuPartonomyListPage:    TMenuItem;
    N11:                     TMenuItem;
    mnuFMAList:              TMenuItem;
    MyTree:                  TTreeView;
    MyJournal:               TMemo;
    N12:                     TMenuItem;
    mnuSyntaxTestPage:       TMenuItem;
    mnuTA98ListPage:         TMenuItem;
    mnuTaxonomyPageT1Full:   TMenuItem;
    N13:                     TMenuItem;
    mnuRATPage:              TMenuItem;
    mnuExcelList:            TMenuItem;
    subTestNoungender:       TMenuItem;
    subTestNounplural:       TMenuItem;
    subTestAdjGender:        TMenuItem;
    subTestAdjPlural:        TMenuItem;
    subTestNounGenSin:       TMenuItem;
    subTestAdjGenSin:        TMenuItem;
    subTestNounGenPlu:       TMenuItem;
    subTestAdjGenPlu:        TMenuItem;
    subAlltests:             TMenuItem;
    subSingleUnitPage:       TMenuItem;
    subBatchUnitPage:        TMenuItem;
    subSingleUniversal:      TMenuItem;
    subTBatchUniversal:      TMenuItem;
    subSbatchUniversal:      TMenuItem;
    subRBatchUniversal:      TMenuItem;
    subQBatchUniversal:      TMenuItem;
    subPartChapter:          TMenuItem;
    subPartLevel1:           TMenuItem;
    subPartLevel2:           TMenuItem;
    subPartLevel2full:       TMenuItem;
    subPartLevel3:           TMenuItem;
    subPartLevel3Full:       TMenuItem;
    subPartLevel4:           TMenuItem;
    N1:                      TMenuItem;
    subTA98Chapter:          TMenuItem;
    subTA98Subchapter:       TMenuItem;
    subTA98Section:          TMenuItem;
    subTA98Subsection:       TMenuItem;
    subEntityPageSingle:     TMenuItem;
    subEntityPageBatch:      TMenuItem;
    subEntityPageXML:        TMenuItem;
    subTaxLevel1:            TMenuItem;
    subTaxLevel1Full:        TMenuItem;
    subTaxLevel2:            TMenuItem;
    subTaxLevel2Full:        TMenuItem;
    subTaxLevel3:            TMenuItem;
    subTaxLevel3Full:        TMenuItem;
    subTaxLevel4:            TMenuItem;
    subAdjectiveExpansion:   TMenuItem;
    mnuInterfaceListPage:    TMenuItem;
    subIntLevel4:            TMenuItem;
    subGenericPartonomy:     TMenuItem;
    subMandExpansion:        TMenuItem;
    mnuExpansionTestPage:    TMenuItem;
    subOptExpansion:         TMenuItem;
    subLatExpansion:         TMenuItem;
    subNoExpansion:          TMenuItem;

                             // Initial load of data
    procedure                FormCreate(
                               Sender: TObject );
                             // Setting and sizing of form and its objects
    procedure                FormShow(
                               Sender: TObject );
                             // Handling of mouse right click on a TA node
    procedure                TAHHierarMouseDown(
                               Sender: TObject;
                               Button: TMouseButton;
                               Shift: TShiftState;
                               X, Y: Integer );
                             // Expansion in the tree view
    procedure                TAHHierarExpanding(
                               Sender: TObject;
                               Node: TTreeNode;
                               var AllowExpansion: Boolean );
                             // Handling of enter key in SearchTID text field
    procedure                SearchTIDKeyPress(
                               Sender: TObject;
                               var Key: Char);

                             // Menu handling of the tree view
    procedure                mnuHTMLTA10Click(
                               Sender: TObject );
    procedure                mnuTA10ByChapterClick(
                               Sender: TObject );
    procedure                mnuExcelByChapterClick(
                               Sender: TObject );
    procedure                mnuExcelLAClick(
                               Sender: TObject );
    procedure                mnuHierarTopClick(
                               Sender: TObject );
    procedure                mnuHierarSClick(
                               Sender: TObject );
    procedure                mnuHierarRClick(
                               Sender: TObject );
    procedure                mnuHierarQClick(
                               Sender: TObject );
    procedure                mnuPropertyBySectionClick(
                               Sender: TObject );
    procedure                mnuPropertyByChapterClick(
                               Sender: TObject );
    procedure                mnuFrenchClick(
                               Sender: TObject );
    procedure                mnuEnglishClick(
                               Sender: TObject );
    procedure                mnuLatinClick(
                               Sender: TObject );
    procedure                mnuExitClick(
                               Sender: TObject );
    procedure                mnuRevTermAStatClick(
                               Sender: TObject );
    procedure                mnuSectionValidateClick(
                               Sender: TObject );
    procedure                mnuAlphaPageClick(
                               Sender: TObject );
    procedure                mnuKWICPageClick(
                               Sender: TObject );
    procedure                mnuSingleLetterPageClick(
                               Sender: TObject );
    procedure                mnuThreeLettersPageClick(
                               Sender: TObject );
    procedure                mnuDefListClick(
                               Sender: TObject );
    procedure                mnuHierarchicalListClick(
                               Sender: TObject );
    procedure                mnuProblemPageClick(
                               Sender: TObject );
    procedure                mnuUniversalPageClick(
                               Sender: TObject );
    procedure                mnuSegmentPageClick(
                               Sender: TObject );
    procedure                mnuLevel4PageClick(
                               Sender: TObject );
    procedure                mnuLevel4ExcelClick(
                               Sender: TObject );
    procedure                mnuValidPageClick(
                               Sender: TObject );
    procedure                mnuLevel46columnClick(
                               Sender: TObject );
    procedure                mnuL5PagesClick(
                               Sender: TObject );
    procedure                mnuUnitPageClick(
                               Sender: TObject );
    procedure                mnuTetraBatchClick(
                               Sender: TObject );
    procedure                mnuGroupLevel4Click(
                               Sender: TObject );
    procedure                mnuTA98sectionClick(
                               Sender: TObject );
    procedure                mnuFMAListClick(
                               Sender: TObject );
    procedure                mnuGenericPartonomyListClick(
                               Sender: TObject );
    procedure                mnuTestPageClick(
                               Sender: TObject );
    procedure                mnuTA98subchapterClick(
                               Sender: TObject );
    procedure                mnuTA98chapterClick(
                               Sender: TObject);
    procedure                mnuT98subsectionClick(
                               Sender: TObject);
    procedure                mnuRATPageClick(
                               Sender: TObject );
    procedure                mnuExcelListClick(
                               Sender: TObject );
    procedure                subTestNounGenderClick(
                               Sender: TObject );
    procedure                subTestNounPluralClick(
                               Sender: TObject );
    procedure                subTestAdjGenderClick(
                               Sender: TObject );
    procedure                subTestAdjPluralClick(
                               Sender: TObject );
    procedure                subTestNounGenSinClick(
                               Sender: TObject );
    procedure                subTestAdjGenSinClick(
                               Sender: TObject );
    procedure                subTestNounGenPluClick(
                               Sender: TObject );
    procedure                subTestAdjGenPluClick(
                               Sender: TObject );
    procedure                subAdjExpansionClick(
                               Sender: TObject );
    procedure                subAlltestsClick(
                               Sender: TObject );
    procedure                subSingleUnitPageClick(
                               Sender: TObject );
    procedure                subBatchUnitPageClick(
                               Sender: TObject );
    procedure                subSingleUniversalClick(
                               Sender: TObject );
    procedure                subTBatchUniversalClick(
                               Sender: TObject );
    procedure                subSbatchUniversalClick(
                               Sender: TObject );
    procedure                subRBatchUniversalClick(
                               Sender: TObject );
    procedure                subQBatchUniversalClick(
                               Sender: TObject );
    procedure                subPartChapterClick(
                               Sender: TObject );
    procedure                subPartLevel1Click(
                               Sender: TObject );
    procedure                subPartLevel2Click(
                               Sender: TObject );
    procedure                subPartLevel2fullClick(
                               Sender: TObject );
    procedure                subPartLevel3Click(
                               Sender: TObject );
    procedure                subPartLevel3FullClick(
                               Sender: TObject );
    procedure                subPartLevel4Click(
                               Sender: TObject );
    procedure                subTA98ChapterClick(
                               Sender: TObject );
    procedure                subTA98SubchapterClick(
                               Sender: TObject );
    procedure                subTA98SectionClick(
                               Sender: TObject );
    procedure                subTA98SubsectionClick(
                               Sender: TObject );
    procedure                subEntityPageSingleClick(
                               Sender: TObject );
    procedure                subEntityPageBatchClick(
                               Sender: TObject );
    procedure                subEntityPageXMLClick(
                               Sender: TObject );
    procedure                subTaxLevel1Click(
                               Sender: TObject );
    procedure                subTaxLevel1FullClick(
                               Sender: TObject );
    procedure                subTaxLevel2Click(
                               Sender: TObject );
    procedure                subTaxLevel2FullClick(
                               Sender: TObject );
    procedure                subTaxLevel3Click(
                               Sender: TObject );
    procedure                subTaxLevel3FullClick(
                               Sender: TObject );
    procedure                subTaxLevel4Click(
                               Sender: TObject );
    procedure                subIntLevel4Click(
                               Sender: TObject );
    procedure                mnuEntityPageClick(
                               Sender: TObject );
    procedure                subMandExpansionClick(
                               Sender: TObject );
    procedure                subOptExpansionClick(
                               Sender: TObject );
    procedure                subLatExpansionClick(
                               Sender: TObject );
    procedure                subNoExpansionClick(
                               Sender: TObject );
  end;

var
                   { Main form for TABrowser }
  THAHierarForm:   tTHAHierarForm;
                   { Input file of sequential sources for TA and FMA }
  InFile:          TextFile;
                   { Number sequence pointers }
  TotSEQ:          Integer;
                   { Number of sequence descriptions }
  TotSequence:     Integer;
                   { Dynamic array for storage of the LATIN libelles }
  MODLA:           Array of ModelRec;
                   { Number of MODLA entries }
  TotMODLA:        Integer;
                   { Dynamic array for sequence pointers }
  SEQ:             Array of SEQrec;
                   { Dynamic array for sequence description }
  Sequence:        Array of Sequencerec;
                   { Single node on top of the TAH, having no parents }
  TAHTopNode:      TTreeNode;
                   { Flag for ShowCode mode }
  ShowCode:        Boolean = False;
                   { Index of currently selected node in TAH }
  TAHCurrIndex:    Integer;
                   { TID of currently selected node in TAH }
  TAHCurrTID:      Integer;
                   { Current LID in listview }
  CurrLID:         Integer;
                   // Current page
  CurrPage:        tTAHPage;
                   { Current selected line in listview }
  CurrListIndex:   Integer;
                   { Hierarchy for inferred partonomy }
  Hierar:          tHierarPos;
                   { Number of items in above hierarchy }
  NbItem:          Integer;
                   { Object for entire terminology }
  TAH:             tTAH;
                   // Number of divisions in hierarchies
  NbInf:           Integer;
  NbTax:           Integer;
  NbPart:          Integer;
                   // Storage for FixTrad
  NbFixTrad:       Integer;
                   // Storage for comments
  NbComments:      Integer;
                   //
  FixTrad:         Array[ 0 .. 99 ] of FixTradRec;
                   // Table of concordance LA-EN-FR
  Concord:         Array of ConcordRec;
                   // Number of concordance entries
  TotConcord:      Integer;
                   //
  DisLang:         tDisLang;

implementation

{$R *.dfm}

uses
  Math, TAInOut, BiProps, Notes, Docums, Definitions, TAHAlphaPage, Valid,
  TA98List, FMA, List, Comments;

procedure          tTHAHierarForm.FormCreate(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ FormCreate
  * Create the main form *
  Description:
  This method defines the global TAH object, which communicates with any other
  existing class.</P>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
var
  FileName:        String;
begin
  // Create global objects
  TAH := tTAH.Create;
  TAH.Signatures := tSignatures.Create;
  TAH.Notes := tNote.Create;
  TAH.Docums := tDocum.Create;
  TAH.Comments := tComments.Create;
  TAH.TA98List := tTA98List.Create;
  TAH.FMAs := tFMA.Create;
  TAH.InitFilenames;

  // Set the languages:
  // main language, subsidiary language and interface language
  // applicable to all generated pages.
  TAH.MainLang := lt_Latin; TAH.SubstLang := lt_English; TAH.DisLanguage := lt_English;
  // TAH.MainLang := lt_Latin; TAH.SubstLang := lt_French; TAH.DisLanguage := lt_English;
  // TAH.MainLang := lt_Latin; TAH.SubstLang := lt_Spanish; TAH.DisLanguage := lt_English;
  // TAH.MainLang := lt_Latin; TAH.SubstLang := lt_Russian; TAH.DisLanguage := lt_English;
  // TAH.MainLang := lt_English; TAH.SubstLang := lt_Latin; TAH.DisLanguage := lt_English;
  // TAH.MainLang := lt_French; TAH.SubstLang := lt_Latin; TAH.DisLanguage := lt_French;
  // TAH.MainLang := lt_Spanish; TAH.SubstLang := lt_Latin; TAH.DisLanguage := lt_Spanish;
  // TAH.MainLang := lt_Russian; TAH.SubstLang := lt_Latin; TAH.DisLanguage := lt_Russian;
  // TAH.MainLang := lt_French;
  // TAH.MainLang := lt_Spanish;
  // TAH.MainLang := lt_English;
  // TAH.MainLang := lt_Russian;
  // TAH.SubstLang := lt_English;
  // TAH.SubstLang := lt_Latin;
  // TAH.SubstLang := lt_French;
  // TAH.SubstLang := lt_Spanish;
  // TAH.SubstLang := lt_Russian;
  // TAH.DisLanguage := lt_English;
  // TAH.DisLanguage := lt_French;
  // TAH.DisLanguage := lt_Spanish;
  // TAH.DisLanguage := lt_Russian;

  // Load the units (formerly tetrahedrons) and create entities
  if ( FileExists( TAH.UnitFileName ) ) then
  begin
    TAH.BuildUnit;
    TAH.BuildEntity;
    TAH.InvertedHierarchy;
  end else
    Exit;

  // Load the language terms
  if FileExists( TAH.LAFileName ) then
    TAH.BuildTermsLA;
  if FileExists( TAH.ENFileName ) then
    TAH.BuildTermsEN;
  if FileExists( TAH.FRFileName ) then
    TAH.BuildTermsFR;
  if FileExists( TAH.ESFileName ) then
    TAH.BuildTermsES;
  if FileExists( TAH.RUFileName ) then
    TAH.BuildTermsRU;
  if FileExists( TAH.MDFileName ) then
    TAH.BuildTermsMD;

  // Read the file of signatures
  if FileExists( TAH.Signatures.FileName ) then
    TAH.Signatures.ReadSigSourceFile;

  // Read the English definition records
  TAH.Definitions := tDefinition.Create;
  FileName := TAH.DefENFileName;
  if ( FileExists( FileName ) ) then
    TAH.Definitions.ReadDefSourceFile( lt_English, FileName );

  // Read the French definition records
  FileName := TAH.DefFRFileName;
  if ( FileExists( FileName ) ) then
    TAH.Definitions.ReadDefSourceFile( lt_French, FileName );

  // Read the Spanish definition records
  FileName := TAH.DefESFileName;
  if ( FileExists( FileName ) ) then
    TAH.Definitions.ReadDefSourceFile( lt_Spanish, FileName );

  // Read the Russian definition records
  FileName := TAH.DefRUFileName;
  if ( FileExists( FileName ) ) then
    TAH.Definitions.ReadDefSourceFile( lt_Russian, FileName );

  // Read the note records in memory if any
  if ( FileExists( TAH.Notes.FileName ) ) then
    TAH.Notes.ReadNotesSourceFile;

  // Read the documentation records
  if ( FileExists( TAH.Docums.FileName ) ) then
    TAH.Docums.ReadDocumSourceFile;

  // Read the Latin case dictionnary
  ReadLatinFile( TAH.LADicoFileName );

  // Read the bivalued properties file in memory
  {TAH.BiProperties := tLinkage.Create;
  TAH.BiProperties.FileName := Dir + ReDirExport + PROPSFileName;
  if ( FileExists( TAH.BiProperties.FileName ) ) then
    TAH.BiProperties.ReadPROPSSourceFile;

  // Read the Validation information (inquiries and actions )
  TAH.Inquiries := tInquiry.Create;
  TAH.Inquiries.FileName := Dir + ReDirExport + InqueryFileName;
  TAH.Inquiries.ReadInquiryFile;
  TAH.Actions := tAction.Create;
  TAH.Actions.FileName := Dir + ReDirExport + ActionFileName;
  TAH.Actions.ReadActionFile;}

  // Read the exception values for traditional terms
  if ( FileExists( TAH.FixTradFileName ) ) then
    TAH.ReadFixTradFile;

  // Read the TA98 list table
  if ( FileExists( TAH.TA98ListFileName ) ) then
    TAH.TA98List.ReadTA98ListFile;

  // Read the TA-FMA comments
  if ( FileExists( TAH.TAFMAFileName ) ) then
    TAH.FMAs.ReadFMAFile;

  // Read the comments
  if ( FileExists( TAH.Comments.FileName ) ) then
    TAH.Comments.ReadCommFile;
end; // ______________________________________________________________FormCreate

procedure          tTHAHierarForm.FormShow(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ FormShow
  * Position, size and other object properties *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin

  // Properties of the main form
  with THAHierarForm do
  begin
    Caption := 'TAH Multiple Hierarchy Browser';
    Hint := 'Main form';
    Width := 760;
    Height := 1000;
    ShowHint := False;
    Left := 40;
    Top := 40;
  end;

  // Properties of the treeview
  with TAHHierar do
  begin
    Align := alLeft;
    Hint := 'Hierarchical view on TAH';
    MultiSelect := False;
    PopupMenu := PopupMenu;
    Width := 750;
    Enabled := True;
  end;
  PopupMenu.AutoPopup := False;

  // Properties of the status bar
  with StatusBar do
  begin
    Height := 24;
    Hint := 'Display of hint or status about object under mouse pointer';
    AutoHint := True;
  end;

  // File menu
  mnuFileMain.Hint := 'Access to the application files';
  mnuExit.Hint := 'Immediate safe stop of TAHBrowser program';

  // Search field
  SearchTID.Left := 400;
  SearchTID.Top := 5;

  // Exclusive language selection
  mnuLatin.RadioItem := True;
  mnuEnglish.RadioItem := True;
  mnuFrench.RadioItem := True;
  mnuLatin.GroupIndex := 7;
  mnuEnglish.GroupIndex := 7;
  mnuFrench.GroupIndex := 7;
  mnuFrench.Checked := True;
  LgCur := lt_Latin;

  // Initialize the treeview and expand first level
  tTAHTreeView( TAHHierar ).Reset( TAHTopNode );
  TAHTopNode.Expand( False );

  // Open treeview on a specified entity (fossa hypophysialis TAH498)
  // TTAHTreeView( TAHHierar ).OpenHierarchy( 498, TAHTopNode );
end; // ________________________________________________________________FormShow

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SearchTIDKeyPress
  * Entering a TID for opening of treeview *
  Description:
  This handler check for the presence of Enter Key on SearchTID textfield.
  When it occurs, it considers the content of this field as a TID, check for
  the corresponding entity being specific or generic, and accordingly opens
  the treeview in the correct hierarchy, partonomy for specific entities and
  taxonomy for generic entities. The found entity is then selected.</P>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
procedure          tTHAHierarForm.SearchTIDKeyPress(
  Sender:          TObject;
  var Key:         Char );
var
  MyTID:           Integer;
  CurrentNode:     TTreeNode;
  IsTax:           Boolean;
begin
  if ( Key = #$D ) then
  begin
    MyTID := StrToInt( SearchTID.Text );
    tTAHTreeView( TAHHierar ).Reset( TAHTopNode );
    TAHTopNode.Expand( False );
    CurrentNode := TAHTopNode;
    IsTax := TAH.IsTaxonomy( MyTID );
    if ( MyTID = 10188 ) then
      IsTax := False;
    tTAHTreeView( TAHHierar ).OpenHierarchy( MyTID, IsTax, CurrentNode );
    tTAHTreeView( TAHHierar ).SetFocus;
    CurrentNode.Selected := True;
  end;
end; // _______________________________________________________SearchTIDKeyPress

procedure          tTHAHierarForm.TAHHierarMouseDown(
  Sender:          TObject;
  Button:          TMouseButton;
  Shift:           TShiftState;
  X, Y:            Integer );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ TAHierarMouseDown
  * Handling of right mouse click in TA Treeview *
  Description:
  This procedure reacts on right mouse click in TA treeview by adjusting a
  popup menu according to the type of selected node. The node corresponding TA
  position in memory is saved as a global variable.<P>
  Used fields: Inserted, TotTA, TID, Code, ENPref, EN, Typ, FMAid.<P>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
var
  ANode:           TTreeNode;
  AName:           String;
  Posit:           Integer;
  MyEntity:        tEntity;
begin
  // Discard left mouse button click
  if Button <> mbRight then
    Exit;

  // Select the pointed node and its index in TA structure
  ANode := TAHHierar.GetNodeAt( X, Y );
  if not Assigned( ANode.Data ) then
    Exit;
  MyEntity := ANode.Data;

  // Retrieve position in a situation of a reference
  // if MyEntity.Reference > 0 then
  // begin
  //   TAHCurrTID := MyEntity.Reference;
  // end else

  // Retrieve position in a standard situation
  begin
    TAHCurrTID := MyEntity.TID;
  end;
  TAHCurrIndex := TAHCurrTID;

  // Enable the menu options and display popup menu
  if ShowCode then
  begin
    Posit := Pos( cSpace, ANode.Text );
    Aname := Copy( ANode.Text, Posit + 1, 1 );
  end else
    AName := ANode.Text;

  // Open the popup menu
  PopupMenu.Popup( TAHHierar.Left + X + 100, TAHHierar.Top + Y + 150);
end; // _______________________________________________________TAHierarMouseDown

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuHTMLTA10Click
  * Handling of menu HTML TA10 *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
procedure          tTHAHierarForm.mnuHTMLTA10Click(
  Sender:          TObject );
begin
  //TA10FacSimilePage( TACurrIndex );
end; // ________________________________________________________mnuHTMLTA10Click

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuTA10ByChapterClick
  * Handling of menu TA 2010 by chapter *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
procedure          tTHAHierarForm.mnuTA10ByChapterClick(
  Sender:          TObject );
begin
  //TAMakeTA10Chapter( TACurrIndex );
end; // ___________________________________________________mnuTA10ByChapterClick

procedure          tTHAHierarForm.mnuT98subsectionClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuTA98subsectionClick
  * Handling of menu TA98 Page by subsection *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeTA98subsectionPage( TAHCurrTID );
end; // __________________________________________________mnuTA98subsectionClick

procedure          tTHAHierarForm.mnuTA98sectionClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuTA98SectionClick
  * Handling of menu TA98 Page by section *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeTA98sectionPage( TAHCurrTID );
end; // _____________________________________________________mnuTA98SectionClick

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuTA98chapterClick
  * Handling of menu TA98 Page by chapter *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
procedure          tTHAHierarForm.mnuTA98chapterClick(
  Sender:          TObject );
begin

end; // _____________________________________________________mnuTA98chapterClick

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuTA98subchapterClick
  * Handling of menu TA98 Page by subchapter *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}

procedure          tTHAHierarForm.mnuTA98subchapterClick(
  Sender:          TObject );
begin
  TAH.MakeTA98subchapterPage( TAHCurrTID );
end; // __________________________________________________mnuTA98subchapterClick

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuExcelByChapterClick
  * Handling of menu TA 2010 Excel by chapter *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
procedure          tTHAHierarForm.mnuExcelByChapterClick(
  Sender:          TObject );
begin
  //TAMakeExcelChapter( TACurrIndex );
end; // __________________________________________________mnuExcelByChapterClick

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuPropertyBySectionClick
  * Handling of menu Property by section RevTermA version *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
procedure          tTHAHierarForm.mnuPropertyBySectionClick(
  Sender:          TObject );
begin
  //TAMakePropertyBySection( TACurrIndex );
end; // _______________________________________________mnuPropertyBySectionClick

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuPropertyByChapterClick
  * Handling of menu Properties by chapter RevTermA version *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
procedure          tTHAHierarForm.mnuPropertyByChapterClick(
  Sender:          TObject );
begin
  TAH.MakePropertyPage( TAHCurrTID );
end; // _______________________________________________mnuPropertyByChapterClick

procedure          tTHAHierarForm.mnuRATPageClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuRATPageClick
  * Handling of menu for RAT Page *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeRATPage( 7960{TAHCurrTID} );
end; // _________________________________________________________mnuRATPageClick

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuTetraPageClick
  * Handling of menu Tetra Page single *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
procedure          tTHAHierarForm.mnuUnitPageClick(
  Sender:          TObject );
begin
  TAH.MakeUnitPage( 7103{TAHCurrTID} );
end; // _______________________________________________________mnuTetraPageClick

procedure          tTHAHierarForm.mnuTetraBatchClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuTetraBatchClick
  * Handling of menu for generation of a batch of Tetra Pages *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeBatchUnit( 7271{TAHCurrTID} );
end; // ______________________________________________________mnuTetraBatchClick

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuExcelLAClick
  * Handling of menu EXCEL LA *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
procedure          tTHAHierarForm.mnuExcelLAClick(
  Sender:          TObject );
begin
  //TAMakeExcelLAPage( TACurrIndex );
end; // _________________________________________________________mnuExcelLAClick

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuHierarTopClick
  * Handling of menu for hierarchy generation top level *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
procedure          tTHAHierarForm.mnuHierarTopClick(
  Sender:          TObject );
begin
  TAH.MakeHierarchyPage( TAHCurrIndex, ds_t );
end; // _______________________________________________________mnuHierarTopClick

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuHierarSClick
  * Handling of menu for hierarchy generation level S *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
procedure          tTHAHierarForm.mnuHierarSClick(
  Sender:          TObject );
begin
  TAH.MakeHierarchyPage( TAHCurrIndex, ds_s );
end; // _________________________________________________________mnuHierarSClick

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuHierarRClick
  * Handling of menu for hierarchy generation level R *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
procedure          tTHAHierarForm.mnuHierarRClick(
  Sender:          TObject );
begin
  TAH.MakeHierarchyPage( TAHCurrIndex, ds_r );
end; // _________________________________________________________mnuHierarRClick

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuHierarQClick
  * Handling of menu for hierarchy generation level Q *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
procedure          tTHAHierarForm.mnuHierarQClick(
  Sender:          TObject );
begin
  TAH.MakeHierarchyPage( TAHCurrIndex, ds_q );
end; // _________________________________________________________mnuHierarQClick

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuAlphaPageClick
  * Handling of menu Alphabetical Page *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
procedure          tTHAHierarForm.mnuAlphaPageClick(
  Sender:          TObject );
begin
  TAHMakeAlphaPage( TAHCurrIndex, False );
end; // _______________________________________________________mnuAlphaPageClick

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuKWICPageClick
  * Handling of menu KWIC Page *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
procedure          tTHAHierarForm.mnuKWICPageClick(
  Sender:          TObject );
begin
  TAHMakeAlphaPage( TAHCurrIndex, True );
end; // ________________________________________________________mnuKWICPageClick

procedure          tTHAHierarForm.mnuSingleLetterPageClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuSingleLetterPageClick
  * Handling of single letter XML Page *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeSingleLetterPage;
end; // ________________________________________________mnuSingleLetterPageClick

procedure          tTHAHierarForm.mnuThreeLettersPageClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuThreeLettersPageClick
  * Handling of three letters XML Page *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeThreeLettersPage;
end; // ________________________________________________mnuThreeLettersPageClick

procedure          tTHAHierarForm.mnuTestPageClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuTestPageClick
  * Build all test Page click *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
end; // ________________________________________________________mnuTestPageClick

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuHierarchicalListClick
  * Build a hierarchical list of partial codes *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
procedure          tTHAHierarForm.mnuHierarchicalListClick(
  Sender:          TObject );
begin
  // TAMakePartialList( TACurrIndex );
end; // ________________________________________________mnuHierarchicalListClick

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuFMAListClick
  * Handling of menu FMA List *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
procedure          tTHAHierarForm.mnuFMAListClick(
  Sender:          TObject );
begin
  TAH.MakeFMAList( TAHCurrTID );
end; // _________________________________________________________mnuFMAListClick

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuExcelListClick
  * Handling of menu Excel list *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
procedure          tTHAHierarForm.mnuExcelListClick(
  Sender:          TObject );
begin
  TAH.MakePartonomyPage( TAHCurrTID, li_Excel );
end; // _______________________________________________________mnuExcelListClick

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuFrenchClick
  * Handling of menu View TA language French *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
procedure          tTHAHierarForm.mnuFrenchClick(
  Sender:          TObject );
begin
  LgCur := lt_French;
  mnuFrench.Checked := True;
  TTAHTreeView( TAHHierar ).Reset( TAHTopNode );
end; // __________________________________________________________mnuFrenchClick

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuEnglishClick
  * Handling of menu View TA language English *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
procedure          tTHAHierarForm.mnuEnglishClick(
  Sender:          TObject );
begin
  LgCur := lt_English;
  mnuEnglish.Checked := True;
  TTAHTreeView( TAHHierar ).Reset( TAHTopNode );
end; procedure tTHAHierarForm.mnuEntityPageClick(Sender: TObject);
begin

end;

// _________________________________________________________mnuEnglishClick

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuLatinClick
  * Handling of menu View TA language Latin *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
procedure          tTHAHierarForm.mnuLatinClick(
  Sender:          TObject );
begin
  LgCur := lt_Latin;
  mnuLatin.Checked := True;
  tTAHTreeView( TAHHierar ).Reset( TAHTopNode );
end; // ___________________________________________________________mnuLatinClick

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuDefListClick
  * Handling of menu Definition Page *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
procedure          tTHAHierarForm.mnuDefListClick(
  Sender:          TObject );
begin
  TAH.MakeDefinPage( 8524{TAHCurrTID} );
end; // _________________________________________________________mnuDefListClick

procedure          tTHAHierarForm.mnuGenericPartonomyListClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuGenericPartonomyListClick
  * Build a generic partonomy list *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeGenericPartonomyPage( TAHCurrTID );
end; // ____________________________________________mnuGenericPartonomyListClick

procedure          tTHAHierarForm.mnuGroupLevel4Click(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuGroupLevel4Click
  * Build a group of segmentation Pages *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeGroupSegmentPage( TAHCurrTID );
end; // _____________________________________________________mnuGroupLevel4Click

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuSegmentPageClick
  * Handling of menu Segmentation Page *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
procedure          tTHAHierarForm.mnuSegmentPageClick(
  Sender:          TObject );
begin
  TAH.MakeSegmentPage( TAHCurrTID, 5 );
end; // _____________________________________________________mnuSegmentPageClick

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuLevel4PageClick
  * Handling of menu Level 4 Page *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
procedure          tTHAHierarForm.mnuLevel4PageClick(
  Sender:          TObject );
begin
  TAH.MakeSegmentPage( TAHCurrTID, 4 );
end; // ______________________________________________________mnuLevel4PageClick

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuLevel4ExcelClick
  * Handling of menu Level 4 Excel *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
procedure          tTHAHierarForm.mnuLevel4ExcelClick(
  Sender:          TObject );
begin
  TAH.MakeSegmentExcel( TAHCurrTID );
end; // _____________________________________________________mnuLevel4ExcelClick

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuLevel46columnClick
  * Handling of menu Level 4 Excel *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
procedure          tTHAHierarForm.mnuLevel46columnClick(
  Sender:          TObject );
begin
  TAH.MakeSegment6Columns( TAHCurrTID );
end; // ___________________________________________________mnuLevel46columnClick

procedure          tTHAHierarForm.mnuValidPageClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuValidPageClick
  * Handling of menu Validation Page *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeValidPage( TAHCurrTID, ca_ListPart );
end; // _______________________________________________________mnuValidPageClick

procedure          tTHAHierarForm.subAdjExpansionClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subAdjExpansionClick
  * Handling of menu for test of adjective expansion *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeTestPage( te_AdjExpansion );
end; // ____________________________________________________subAdjExpansionClick

procedure          tTHAHierarForm.subMandExpansionClick(
  Sender:          TObject);
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subMandExpansionClick
  * Handling of menu for test of mandatory expansion *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeTestPage( te_MandExpansion );
end; // ___________________________________________________subMandExpansionClick

procedure          tTHAHierarForm.subNoExpansionClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subNoExpansionClick
  * Handling of menu for test of terms without expansion *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeTestPage( te_NoExpansion );
end; // _____________________________________________________subNoExpansionClick

procedure          tTHAHierarForm.subOptExpansionClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subOptExpansionClick
  * Handling of menu for test of optional expansion *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeTestPage( te_OptExpansion );
end; // ____________________________________________________subOptExpansionClick

procedure          tTHAHierarForm.subAlltestsClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subAlltestsClick
  * Handling of menu for all syntactic tests *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeTestPage( te_NounGender );
  TAH.MakeTestPage( te_AdjGender );
  TAH.MakeTestPage( te_NounPlural );
  TAH.MakeTestPage( te_AdjPlural );
  TAH.MakeTestPage( te_NounGenSin );
  TAH.MakeTestPage( te_AdjGenSin );
  TAH.MakeTestPage( te_NounGenPlu );
  TAH.MakeTestPage( te_AdjGenPlu );
end; // ________________________________________________________subAlltestsClick

procedure          tTHAHierarForm.subBatchUnitPageClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subBatchUnitPageClick
  * Handling of submenu for a batch of Unit Pages *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeBatchUnit( 34126{TAHCurrTID} );
end; // ___________________________________________________subBatchUnitPageClick

procedure          tTHAHierarForm.subEntityPageSingleClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subEntityPageSingleClick
  * Handling of submenu for a single Entity Pages *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
var
  Actual:         tEntity;
begin
  Actual := TAH.GetEntityByTID( 6191{TAHCurrTID} );
  if ( Actual <> nil ) then
    TAH.MakeEntityPage( Actual );
end; // ________________________________________________subEntityPageSingleClick

procedure          tTHAHierarForm.subEntityPageBatchClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subEntityPageBatchClick
  * Handling of submenu for a batch of Entity Pages *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeBatchEntity( 34126{TAHCurrTID} );
end; // _________________________________________________subEntityPageBatchClick

procedure          tTHAHierarForm.subEntityPageXMLClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subEntityPageXMLClick
  * Handling of submenu for a XML Entity Pages *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  //TAMakeEntityXMLPage( TACurrIndex );
end; // _________________________________________________subEntityPageBatchClick

procedure          tTHAHierarForm.subIntLevel4Click(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subIntLevel4Click
  * Handling of submenu for the level 4 of interface list page *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeInterfacePage( 12622{TAHCurrTID}, li_int4 );
end;

procedure          tTHAHierarForm.subLatExpansionClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subLatExpansionClick
  * Handling of menu for test of lateral expansion *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeTestPage( te_LatExpansion );
end; // ____________________________________________________subLatExpansionClick

procedure          tTHAHierarForm.subPartChapterClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subPartChapterClick
  * Handling of submenu for partonomy list by chapter *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakePartonomyPage( TAHCurrTID, li_part0 );
end; // _____________________________________________________subPartChapterClick

procedure          tTHAHierarForm.subPartLevel1Click(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subPartLevel1Click
  * Handling of submenu for partonomy list by level 1 *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  if ( IsTA98 ) then
    TAH.MakeAnyPart98Page( 32919{TAHCurrTID}, li_TA98part1 )
  else
    TAH.MakeAnyPartonomyPage( 5062{TAHCurrTID}, li_part1 );
end; // ______________________________________________________subPartLevel1Click

procedure          tTHAHierarForm.subPartLevel2Click(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subPartLevel2Click
  * Handling of submenu for partonomy list by level 2 *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  if ( IsTA98 ) then
    TAH.MakeAnyPart98Page( 5264{TAHCurrTID}, li_TA98part2 )
  else
    TAH.MakeAnyPartonomyPage( 5257{TAHCurrTID}, li_part2 );
end; // ______________________________________________________subPartLevel2Click

procedure          tTHAHierarForm.subPartLevel2FullClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subPartLevel2FullClick
  * Handling of submenu for partonomy list by level 2 full *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  if ( IsTA98 ) then
    TAH.MakeAnyPart98Page( 6877{TAHCurrTID}, li_TA98part2f )
  else
    TAH.MakePartonomyPage( 5257{TAHCurrTID}, li_part2f );
end; // __________________________________________________subPartLevel2FullClick

procedure          tTHAHierarForm.subPartLevel3Click(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subPartLevel3Click
  * Handling of submenu for partonomy list by level 3 *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  if ( IsTA98 ) then
    TAH.MakeAnyPart98Page( TAHCurrTID, li_TA98part3 )
  else
    TAH.MakeAnyPartonomyPage( 5264{TAHCurrTID}, li_part3 );
end; // ______________________________________________________subPartLevel3Click

procedure          tTHAHierarForm.subPartLevel3FullClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subPartLevel3FullClick
  * Handling of submenu for partonomy list by level 3 full *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  if ( IsTA98 ) then
    TAH.MakeAnyPart98Page( TAHCurrTID, li_TA98part3 )
  else
    TAH.MakeAnyPartonomyPage( 5264{TAHCurrTID}, li_part3f );
end; // __________________________________________________subPartLevel3FullClick

procedure          tTHAHierarForm.subPartLevel4Click(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subPartLevel4Click
  * Handling of submenu for partonomy list by level 4 *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  if ( IsTA98 ) then
    TAH.MakeAnyPart98Page( TAHCurrTID, li_TA98part4 )
  else
    TAH.MakeAnyPartonomyPage( 34126{TAHCurrTID}, li_part4 );
end; // ______________________________________________________subPartLevel4Click

procedure          tTHAHierarForm.subQBatchUniversalClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subQBatchUniversalClick
  * Handling of submenu for a Q batch of Universal Pages *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
 TAH.MakeUniversalBatch( TAHCurrTID, ds_q );
end; // _________________________________________________subQBatchUniversalClick

procedure          tTHAHierarForm.subRBatchUniversalClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subRBatchUniversalClick
  * Handling of submenu for a R batch of Universal Pages *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
 TAH.MakeUniversalBatch( TAHCurrTID, ds_r );
end; // _________________________________________________subRBatchUniversalClick

procedure          tTHAHierarForm.subSbatchUniversalClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subSBatchUniversalClick
  * Handling of submenu for a S batch of Universal Pages *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
 TAH.MakeUniversalBatch( TAHCurrTID, ds_s );
end; // _________________________________________________subSBatchUniversalClick

procedure          tTHAHierarForm.subTA98ChapterClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subTA98ChapterClick
  * Handling of submenu for a chapter TA98 Pages *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeTA98chapterPage( TAHCurrTID );
end; // _____________________________________________________subTA98ChapterClick

procedure          tTHAHierarForm.subTA98SubchapterClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subTA98SubchapterClick
  * Handling of submenu for a subchapter TA98 Pages *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeTA98subchapterPage( TAHCurrTID );
end; // __________________________________________________subTA98SubchapterClick

procedure          tTHAHierarForm.subTA98SectionClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subTA98SectionClick
  * Handling of submenu for a section TA98 Pages *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeTA98sectionPage( TAHCurrTID );
end; // _____________________________________________________subTA98SectionClick

procedure          tTHAHierarForm.subTA98SubsectionClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subTA98SubsectionClick
  * Handling of submenu for a subsection TA98 Pages *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeTA98subsectionPage( TAHCurrTID );
end; // __________________________________________________subTA98SubsectionClick

procedure          tTHAHierarForm.subTaxLevel1Click(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subTaxLevel1Click
  * Handling of submenu for a level 1 Taxonomy List Pages *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeAnyTaxonomyPage( 10157{TAHCurrTID}, li_tax1 );
end; // _______________________________________________________subTaxLevel1Click

procedure          tTHAHierarForm.subTaxLevel1FullClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subTaxLevel1FullClick
  * Handling of submenu for a level 1 full Taxonomy List Pages *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeAnyTaxonomyPage( 10157{TAHCurrTID}, li_tax1f );
end; // ___________________________________________________subTaxLevel1FullClick

procedure          tTHAHierarForm.subTaxLevel2Click(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ susubTaxLevel2Clickb
  * Handling of submenu for a level 2 Taxonomy List Pages *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeAnyTaxonomyPage( 10810{TAHCurrTID}, li_tax2 );
end; // _______________________________________________________subTaxLevel2Click

procedure          tTHAHierarForm.subTaxLevel2FullClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subTaxLevel2FullClick
  * Handling of submenu for a level 2 full Taxonomy List Pages *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeAnyTaxonomyPage( 10810{TAHCurrTID}, li_tax2f );
end; // ___________________________________________________subTaxLevel2FullClick

procedure          tTHAHierarForm.subTaxLevel3Click(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subTaxLevel3Click
  * Handling of submenu for a level 3 Taxonomy List Pages *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeAnyTaxonomyPage( 5064{TAHCurrTID}, li_tax3 );
end; // _______________________________________________________subTaxLevel3Click

procedure          tTHAHierarForm.subTaxLevel3FullClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subTaxLevel3FullClick
  * Handling of submenu for a level 3 full Taxonomy List Pages *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeAnyTaxonomyPage( 22882{TAHCurrTID}, li_tax3f );
end; // ___________________________________________________subTaxLevel3FullClick

procedure          tTHAHierarForm.subTaxLevel4Click(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subTaxLevel4Click
  * Handling of submenu for a level 4 Taxonomy List Pages *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeAnyTaxonomyPage( 12688{TAHCurrTID}, li_tax4 );
end; // _______________________________________________________subTaxLevel4Click

procedure          tTHAHierarForm.subTBatchUniversalClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subTBatchUniversalClick
  * Handling of submenu for a T batch of Universal Pages *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
 TAH.MakeUniversalBatch( TAHCurrTID, ds_t );
end; // _________________________________________________subTBatchUniversalClick

procedure          tTHAHierarForm.subSingleUniversalClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subSingleUniversalClick
  * Handling of submenu for a section of Universal Pages *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
var
  Actual:          tEntity;
begin
  Actual := TAH.GetEntityByTID( TAHCurrTID );
  if ( Actual <> nil ) then
    TAH.MakeUniversalPage( 34127{TAHCurrTID}, Actual.Display );
end; // _________________________________________________subSingleUniversalClick

procedure          tTHAHierarForm.subSingleUnitPageClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subSingleUnitPageClick
  * Handling of submenu for a single Unit Page *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeUnitPage( 4155{TAHCurrTID} );
end; // __________________________________________________subSingleUnitPageClick

procedure          tTHAHierarForm.subTestAdjGenderClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subTestAdjGenderClick
  * Handling of menu for test of adjective gender *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeTestPage( te_AdjGender );
end; // ___________________________________________________subTestAdjGenderClick

procedure          tTHAHierarForm.subTestAdjPluralClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subTestAdjPluralClick
  * Handling of menu for test of plural of adjectives *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeTestPage( te_AdjPlural );
end; // ___________________________________________________subTestAdjPluralClick

procedure          tTHAHierarForm.subTestAdjGenSinClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subTestAdjGenSinClick
  * Handling of menu for test of genitive singular of adjectives *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeTestPage( te_AdjGenSin );
end; // ___________________________________________________subTestAdjGenSinClick

procedure          TTHAHierarForm.subTestAdjGenPluClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subTestAdjGenPluClick
  * Handling of menu for test of genitive plural of adjectives *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeTestPage( te_AdjGenPlu );
end; // ___________________________________________________subTestAdjGenPluClick

procedure          TTHAHierarForm.subTestNounGenderClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subTestNounGenderClick
  * Handling of submenu for test of gender of nouns *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeTestPage( te_NounGender );
end; // __________________________________________________subTestNounGenderClick

procedure          TTHAHierarForm.subTestNounPluralClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subTestNounPluralClick
  * Handling of submenu for test of plural of nouns *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeTestPage( te_NounPlural );
end; // __________________________________________________subTestNounPluralClick

procedure          tTHAHierarForm.subTestNounGenSinClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subTestNounGenSinClick
  * Handling of submenu for test of genitive singular of nouns *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeTestPage( te_AdjGenSin );
end; // __________________________________________________subTestNounGenSinClick

procedure          tTHAHierarForm.subTestNounGenPluClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ subTestNounGenPluClick
  * Handling of submenu for test of genitive plural of nouns *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin
  TAH.MakeTestPage( te_NounGenPlu );
end; // __________________________________________________subTestNounGenPluClick

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuL5PagesClick
  * Handling of menu all Validation level 5 pages *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
procedure          tTHAHierarForm.mnuL5PagesClick(
  Sender:          TObject );
begin
  TAH.MakeValidL5Pages( TAHCurrTID );
end; // _________________________________________________________mnuL5PagesClick

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuProblemPageClick
  * Creation of problem page by chapter *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
procedure          tTHAHierarForm.mnuProblemPageClick(
  Sender:          TObject );
begin
  //TAMakeProblemPage( TACurrIndex );
end; // _____________________________________________________mnuProblemPageClick

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuExitClick
  * Handling of menu File Exit *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
procedure          tTHAHierarForm.mnuExitClick(
  Sender:          TObject );
begin
  Exit;
end; // ____________________________________________________________mnuExitClick

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuSectionValidateClick
  * Validate hierarchy by section *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
procedure          tTHAHierarForm.mnuSectionValidateClick(
  Sender:          TObject );
begin
  //TAValidateHierarchy( TACurrIndex );
end; // _________________________________________________mnuSectionValidateClick

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuRevTermAStatClick
  * Handling of menu for stats by chapter on RevTermA *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
procedure          tTHAHierarForm.mnuRevTermAStatClick(
  Sender:          TObject );
begin
  //TAMakeStatPage( TACurrIndex );
end; // ____________________________________________________mnuRevTermAStatClick

procedure          tTHAHierarForm.mnuUniversalPageClick(
  Sender:          TObject );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ mnuUniversalPageClick
  * Handling of menu Latin Page for top pages *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
begin

end; // ___________________________________________________mnuUniversalPageClick

{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ TAHierarExpanding
  * Handling of OnExpanding event on TAHHierar *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
procedure          tTHAHierarForm.TAHHierarExpanding(
  Sender:          TObject;
  Node:            TTreeNode;
  var AllowExpansion: Boolean );
begin
  tTAHTreeView( TAHHierar ).MakeExpansion( Node );
  AllowExpansion := True;
end; // _______________________________________________________TAHierarExpanding

procedure          tTAHTreeView.MakeExpansion(
  var Node:        TTreeNode );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MakeExpansion
  * Control the expansion of a node of the tree view *
  Description:
  This method is called when the user clicks on the expansion handle of a not
  expanded node (+ handle). The selected node is transmitted as argument.<P>
  This method is responsible to retrieve and to add all the children of a node
  when it is expanded. Two situations occur: either the children have already
  been previously added and the method acts as a do-nothing method, or the
  children are not yet developed and they should be retrieved and added to
  the node. In this way, the tree is built only when needed, saving the time
  of a long initial build of the whole tree.<P>
  When adding a new node to the tree, a check is performed for the presence of
  children. In case of such a presence, the attribute HasChildren is set to
  True with the result of making visible the + handle for further expansion.
  Otherwise, by default, the attribute HasChildren is False.<P>
  A special situation occurs for a top node (marked as t): its children
  are retrieved as special nodes (marked as c) in the entire terminology.<P>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
var
  Indx:            Integer;
  Posit:           Integer;
  TID:             Integer;
  IsTax:           Boolean;
  Libelle:         String;
  Children:        String;
  Level:           TTreeNode;
  ChapNode:        TTreeNode;
  Parent:          TTreeNode;
  MyEntity:        tEntity;
  Child:           tEntity;
  MyParent:        tEntity;
begin
  // Check if this node has previously been expanded, then exit
  if Node.Count > 0 then
    Exit;
  MyEntity := Node.Data;

  // Check for a reference
  if MyEntity.Reference > 0 then
    MyEntity := TAH.GetEntityByTID( MyEntity.Reference );
  if ( MyEntity = nil ) then
    Exit;

  // Expansion of the top level of TAH hierarchy
  if ( MyEntity.TID = TATopPos ) then
  begin
    for Indx := 1 to TAH.TotTAH do
    begin
      Child := TAH.GetEntityByPos( Indx );
      if ( Child = nil ) then
        Continue;
      with Child do
      begin
        if ( ( Child.Display = ds_c ) or
             ( Child.Display = ds_d ) or
             ( Child.TID = 13545 ) ) then
        begin
          Libelle := InternalTex;
          if ShowCode then
            Libelle := Cod98 + cSpace + Libelle;
          if Display = ds_c then
            Libelle := 'C' + cSpace + Libelle;
          if Display = ds_d then
            Libelle := 'D' + cSpace + Libelle;
          ChapNode := Self.Items.AddChild( Node, Libelle );
          ChapNode.HasChildren := True;
          ChapNode.Data := Child;
        end;
      end; // with
    end; // for
  end else

  // Expansion of a subsequent level of TAH in partonomic mode
  begin
    Parent := Node.Parent;
    MyParent := Parent.Data;
    if ( MyEntity.TID = 10188 ) then
      IsTax := True
    else
      IsTax := MyEntity.TaxAnc = MyParent.TID;
    if not IsTax then
    begin
      Children := MyEntity.PartCh;
      while Children <> cEmpty do
      begin
        Posit := Pos( cSemi, Children );
        if Posit > 0 then
        begin
          TID := StrToInt( Copy( Children, 1, Posit - 1 ) );
          Children := Copy( Children, Posit + 1, Length( Children ) );
        end else
        begin
          TID := StrToInt( Children );
          Children := cEmpty;
        end;
        Child := TAH.GetEntityByTID( TID );
        if ( Child <> nil ) then
        begin
          Libelle := Child.InternalTex;
          if Child.Display = ds_t then
            Libelle := 'T' + cSpace + Libelle;
          if Child.Display = ds_s then
            Libelle := 'S' + cSpace + Libelle;
          if Child.Display = ds_r then
            Libelle := 'R' + cSpace + Libelle;
          if Child.Display = ds_q then
            Libelle := 'Q' + cSpace + Libelle;
          Level := Self.Items.AddChild( Node, Libelle );
          if Child.PartCh <> cEmpty then
            Level.HasChildren := True;
          Level.Data := Child;
        end;
      end; // while
    end else


    // Expansion of a subsequent level of TAH in taxonomic mode
    begin
      Children := MyEntity.TaxCh;
      while ( Children <> cEmpty ) do
      begin
        Posit := Pos( cSemi, Children );
        if Posit > 0 then
        begin
          TID := StrToInt( Copy( Children, 1, Posit - 1 ) );
          Children := Copy( Children, Posit + 1, Length( Children ) );
        end else
        begin
          TID := StrToInt( Children );
          Children := cEmpty;
        end;
        Child := TAH.GetEntityByTID( TID );
        Libelle := Child.InternalTex;
        if Child.Display = ds_s then
          Libelle := 'S' + cSpace + Libelle;
        if Child.Display = ds_r then
          Libelle := 'R' + cSpace + Libelle;
        if Child.Display = ds_q then
          Libelle := 'Q' + cSpace + Libelle;
        Level := Self.Items.AddChild( Node, Libelle );
        if ( Child.TaxCh <> cEmpty ) then
          Level.HasChildren := True;
        Level.Data := Child;
      end; // while
    end;
  end;
end; // ___________________________________________________________MakeExpansion

procedure          TTAHTreeView.Reset(
  var TopNode:     TTreeNode );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Reset
  * Reset the TAH tree view *
  Description:
  The top node of TAH hierarchy is unique and located in position TAHTopPos.
  This procedure builds the top node, which is saved as a global variable,
  and display it in tree view.<P>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
var
  Libelle:         String;
  Top:             tEntity;
begin
  // Create the top node of tree
  Self.Items.Clear;
  Top := TAH.GetEntityByPos( TATopPos );
  Libelle := Top.InternalTex;
  TopNode := Self.Items.Add( nil, Libelle );
  TopNode.Data := Top;
  TopNode.HasChildren := True;
end; // ___________________________________________________________________Reset

procedure          tTAHTreeView.OpenHierarchy(
  TID:             Integer;
  IsTax:           Boolean;
  var CurrentNode: TTreeNode );
{<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ OpenHierarchy
  * Open the treeview on any hierarchy *
  Description:
  For the specified TID, this procedure recursively retrieves the complete
  hierarchy, either partonomy for specific entities or taxonomy for generic
  entities, and then from top to bottom opens successively all the nodes up
  to the designed node.</P>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
var
  MyTID:           Integer;
  MyNodeTID:       Integer;
  Actual:          tEntity;
  MyEntity:        tEntity;
  MyNode:          TTreeNode;
begin
  // Stop the search on top of TA
  if ( TID = TATopPos ) then
    Exit;

  // Retrieve all partonomic ancestors
  Actual := TAH.GetEntityByTID( TID );
  if ( Actual <> nil ) then
  begin

    // Find father entity in the selected hierarchy
    if ( IsTax ) then
      MyTID := Actual.TaxAnc
    else
      MyTID := Actual.PartAnc;

    // Move one step up in the selected hierarchy
    if ( MyTID > 0 ) then
    begin
      Self.OpenHierarchy( MyTID, IsTax, CurrentNode );
    end;

    // Open the first child on current position
    MyNode := CurrentNode.GetFirstChild;
    if ( MyNode = nil ) then
      Exit;
    MyEntity := MyNode.Data;
    MyNodeTID := MyEntity.TID;

    // Loop on all siblings on current position
    while ( ( MyNodeTID <> TID ) and ( MyNode <> nil ) ) do
    begin
      MyNode := MyNode.GetNextSibling;
      if ( MyNode = nil ) then
        Exit;
      MyEntity := MyNode.Data;
      MyNodeTID := MyEntity.TID;
    end; // while

    //
    if ( MyNodeTID = TID ) then
    begin
      MyNode.Expand( False );
      CurrentNode := MyNode;
    end;
  end;
end; // ___________________________________________________________OpenHierarchy

end.
